{"version":3,"sources":["../src sync /i18n/.js$","i18n.js","config/api.js","App.tsx","services/stats.js","serviceWorker.ts","index.tsx","config/i18n.js","styles.module.scss"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","i18next","addResourceBundle","total_cases","total_recoveries","total_deaths","total_recovered","total_new_cases_today","total_new_deaths_today","api","create","baseURL","process","timeout","options","dataLabels","enabled","stroke","curve","xaxis","type","headerKeys","App","useState","series","setSeries","totalStats","setTotalStats","t","useTranslation","useEffect","country","get","countryTimeline","getStats","then","response","ok","key","name","data","timelineitems","date","x","moment","format","y","countryTotal","getTotalStats","countrydata","className","styles","header","length","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","requireContext","i18n","use","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","require"],"mappings":"iHAAA,IAAIA,EAAM,CACT,mBAAoB,GACpB,YAAa,KAId,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,iCCvBpB,YAEAY,EAAQC,kBAAkB,KAAM,OAAQ,CACtCC,YAAa,cACbC,iBAAkB,mBAClBC,aAAc,eACdC,gBAAiB,kBACjBC,sBAAuB,wBACvBC,uBAAwB,4B,gKCCXC,EANHC,iBAAO,CACjBC,QAASC,2CACTC,QAAS,OCILC,EAAU,CACdA,QAAS,CACPC,WAAY,CACVC,SAAS,GAEXC,OAAQ,CACNC,MAAO,UAETC,MAAO,CACLC,KAAM,cAKNxB,EAAO,CACX,cACA,mBACA,gBAGIyB,EAAa,CACjB,cACA,kBACA,eACA,wBACA,0BA2BaC,MAxBf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAGLC,EAAMC,cAAND,EAWR,OAVAE,qBAAU,YCvCY,eAACC,EAAD,uDAAW,KAAX,OAAoBtB,EAAIuB,IAAI,GAAI,CAAEC,gBAAiBF,KDwCvEG,GAAWC,MAAK,SAAAC,GACVA,EAASC,IACXZ,EAAU7B,EAAKV,KAAI,SAAAoD,GAAG,MAAK,CAAEC,KAAMX,EAAE,QAAD,OAASU,IAAQlB,KAAM,OAAQoB,KAAM3C,OAAOD,KAAKwC,EAASI,KAAKC,cAAc,IAAIvD,KAAI,SAAAwD,GAAI,MAAK,CAAEC,EAAGC,IAAOF,GAAMG,OAAO,WAAYC,EAAGV,EAASI,KAAKC,cAAc,GAAGC,GAAMJ,eCxC1L,eAACP,EAAD,uDAAW,KAAX,OAAoBtB,EAAIuB,IAAI,GAAI,CAAEe,aAAchB,ID2CzEiB,GAAgBb,MAAK,SAAAC,GAChBA,EAASC,IAAIV,EAAcS,EAASI,KAAKS,YAAY,SAEzD,IAED,yBAAKC,UAAU,OACb,yBAAKA,UAAWC,IAAOC,QACpB/B,EAAWnC,KAAI,SAAAoD,GAAG,OAAI,wBAAIA,IAAKA,GAAMV,EAAE,QAAD,OAASU,IAAzB,KAAmCZ,EAAWY,UAEpEd,EAAO6B,QAAU,kBAAC,IAAD,CAAYjC,KAAK,OAAON,QAASA,EAASU,OAAQA,EAAQ8B,OAAO,UE5CvEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUC,SAAS,WACjB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,gCEjJ5B,WAMoBC,EANpB,eAUAC,IACGC,IAAIC,KAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EACPC,cAAe,CACbC,aAAa,MAZCR,EAgBTS,QAfaxF,OAAOV,IAAIyF,GAiBpBC,YAAf,G,mBCvBA7E,EAAOC,QAAU,CAAC,OAAS,yB","file":"static/js/main.13fc0753.chunk.js","sourcesContent":["var map = {\n\t\"./config/i18n.js\": 31,\n\t\"./i18n.js\": 126\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 125;","import i18next from 'i18next';\n\ni18next.addResourceBundle('en', 'home', {\n  total_cases: 'Total Cases',\n  total_recoveries: 'Total Recoveries',\n  total_deaths: 'Total Deaths',\n  total_recovered: 'Total Recovered',\n  total_new_cases_today: 'Total New Cases Today',\n  total_new_deaths_today: 'Total New Deaths Today'\n});\n","\nimport { create } from 'apisauce';\n\nconst api = create({\n  baseURL: process.env.REACT_APP_AUTH_API_BASE_URL,\n  timeout: 15000\n});\n\n\nexport default api;\n","import React, { useEffect, useState } from 'react';\nimport ApexCharts from 'react-apexcharts';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\n\nimport './App.scss';\nimport styles from './styles.module.scss';\nimport { getStats, getTotalStats } from './services/stats';\n\nconst options = {\n  options: {\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'smooth'\n    },\n    xaxis: {\n      type: 'datetime',\n    }\n  }\n};\n\nconst keys = [\n  'total_cases',\n  'total_recoveries',\n  'total_deaths'\n];\n\nconst headerKeys = [\n  'total_cases',\n  'total_recovered',\n  'total_deaths',\n  'total_new_cases_today',\n  'total_new_deaths_today'\n]\n\nfunction App() {\n  const [series, setSeries] = useState([] as any);\n  const [totalStats, setTotalStats] = useState({} as any);\n  const { t } = useTranslation();\n  useEffect(() => {\n    getStats().then(response => {\n      if (response.ok) {\n        setSeries(keys.map(key => ({ name: t(`home:${key}`), type: 'line', data: Object.keys(response.data.timelineitems[0]).map(date => ({ x: moment(date).format('d/MM/YY'), y: response.data.timelineitems[0][date][key] })) })))\n      }\n    })\n    getTotalStats().then(response => {\n      if(response.ok) setTotalStats(response.data.countrydata[0])\n    })\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className={styles.header}>\n        {headerKeys.map(key => <h2 key={key}>{t(`home:${key}`)}: {totalStats[key]}</h2>)}\n      </div>\n      {!!series.length && <ApexCharts type=\"area\" options={options} series={series} height=\"300\" />}\n    </div>\n  );\n}\n\nexport default App;\n","import api from '../config/api';\n\nexport const getStats = (country = 'AR') => api.get('', { countryTimeline: country });\n\nexport const getTotalStats = (country = 'AR') => api.get('', { countryTotal: country });\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './config/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback=\"loading\">\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// not like to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\nfunction requireAll(requireContext) {\n  return requireContext.keys().map(requireContext);\n}\n\ni18n\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\nrequireAll(require.context('..', true, /i18n\\.js$/));\n\nexport default i18n;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__1XZD3\"};"],"sourceRoot":""}